program1 --> NOP 101 times, then HLT

program2 --> NOP, R0_l-AND-R0_m and Put result in R1_l.
Then R1_l-OR-R1_m and Put result in R2_l.
Then R2_l-AND-R2_m and Put result in R0_l.
Repeat, then HLT.
NOTE: preliminarly load some numbers in R0_l (0xC6), R0_m (0x53), R1_m (0x81), R2_m (0x0F)
Final result:
R0_m: 0x53; R0_l: 0x03
R1_m: 0x81; R1_l: 0x03
R2_m: 0x0F; R2_l: 0x83

program3 --> NOP, R0-AND-R1 and Put result in R2 (16 bit AND).
R0-OR-R1 and Put result in R3 (16 bit OR), then HLT
NOTE: preliminarly load some numbers in R0 and R1
Final result:
R0_m: 0x53; R0_l: 0xF7
R1_m: 0x81; R1_l: 0xA8
R2_m: 0x01; R2_l: 0xA0
R3_m: 0xD3; R3_l: 0xFF

program4 --> NOP, shift left (8bit) R0_l and save in R0_m,
Shift right (8bit) R0_l and save in R1_l,
Aritmetic shift right (8bit) R0_l and save in R1_m.
Then, shift left (16bit) R1 and save in R2,
Shift right (16bit) R1 and save in R4_l,
Aritmetic shift right (16bit) R1 and save in R4_m.
Then, shift left (32bit) R4 and save in R5,
Shift right (32bit) R4 and save in R5,
Aritmetic shift right (32bit) R4 and save in R5, then HLT.
NOTE: preliminarly load some numbers in R0: R0_l: 0xD3
Final result:
R0_m: 0xA6; R0_l: 0xD3
R1_m: 0xE9; R1_l: 0x69
R2_m: 0xD2; R2_l: 0xD2
R4_mh: 0xF4; R4_ml: 0xB4; R4_lh: 0x74; R4_ll: 0xB4;
R5_mh: 0xE9; R5_ml: 0x68; R5_lh: 0xE9; R5_ll: 0x68; (first op)
R5_mh: 0x7A; R5_ml: 0x5A; R5_lh: 0x3A; R5_ll: 0x5A; (second op)
R5_mh: 0xFA; R5_ml: 0x5A; R5_lh: 0x3A; R5_ll: 0x5A; (third op)

program5 --> NOP, then perform:
ADD16 R2=R0+R1
SUB16 R3=R0-R1
ADD32 R5=R4+R5
SUB32 R5=R4-R5
NOTE: operations are with sign!
NOTE2: preliminarly load some numbers in R0,R1,R4,R5:
R0: 3201 0x0C81
R1: 749 0x02ED (if you want to trigger overflow: 32500 0x7EF4 )
R4: 524680 0x00080188
R5: 786364 0x000BFFBC
Final result: 
R2: 3950 0x0F6E (if R1==32500 overflow --> 35701, hence -29835 0X8B75 )
R3: 2452 0x0994 (if R1==32500 --> -29299 0X8D8D )
R5 (1st op): 1311044 0x00140144
R5 (2nd op): -786364 0xFFF40044

program6 --> NOP, then:
STW8 content of R0_l to RAM address 0x0010
STW8 content of R0_m to RAM address 0x0020
STW16 content of R2 to RAM address 0x00FF-0100
STW16 content of R4_l to RAM address 0x0040-0041
STW16 content of R4_m to RAM address 0x0042-0043
LDW8 content of RAM address 0x0010 to R1_l
LDW8 content of RAM address 0x0020 to R1_m
LDW16 content of RAM address 0x00FF-0100 to R3
LDW16 content of RAM address 0x0040-0041 to R5_l
LDW16 content of RAM address 0x0042-0043 to R5_m
then HLT.
preliminary load some numbers in R0, R2, R4: you will find R1=R0, R3=R2,R5=R4

program7 --> NOP, then:
instr. 0x0001: if R0_l is zero, branch to 0x0008 otherwise HLT
instr. 0x0009: if R0_m is zero, branch to 0x0050 (HLT)
instr. 0x0011: if R1_l is > 0, branch to 0x0018 otherwise HLT
instr. 0x0019: if R1_m is > 0, branch to 0x0050 (HLT)
instr. 0x0021: if R2_l is >= 0, branch to 0x0028 otherwise HLT
instr. 0x0029: if R2_m is >= 0, branch to 0x0050 (HLT)
instr. 0x0031: if R3_l is < 0, branch to 0x0038 otherwise HLT
instr. 0x0039: if R3_m is < 0, branch to 0x0050 (HLT)
instr. 0x0041: if R4_ll is <= 0, branch to 0x0048 otherwise HLT
instr. 0x0049: if R4_lh is <= 0, branch to 0x0050 (HLT)
preliminary load some numbers in R0_l,...,R4_lh:
R0_l  0x00 (=0)
R0_m  0x11 (>0)
R1_l  0x0F (>0)
R1_m  0xF0 (<0)
R2_l  0x10 (>0)
R2_m  0xD0 (<0)
R3_l  0xD1 (<0)
R3_m  0x1D (>0)
R4_ll 0xFF (<0)
R4_lh 0x10 (>0)
if everything is executed correctly, the program counter stops at 0x004a.

program8 --> NOP, then:
instr. 0x0001: if R0 is zero, branch to 0x0008 otherwise HLT
instr. 0x0009: if R1 is zero, branch to 0x0050 (HLT)
instr. 0x0011: if R1 is > 0, branch to 0x0018 otherwise HLT
instr. 0x0019: if R2 is > 0, branch to 0x0050 (HLT)
instr. 0x0021: if R4_l is >= 0, branch to 0x0028 otherwise HLT
instr. 0x0029: if R4_m is >= 0, branch to 0x0050 (HLT)
instr. 0x0031: if R5_l is < 0, branch to 0x0038 otherwise HLT
instr. 0x0039: if R5_m is < 0, branch to 0x0050 (HLT)
instr. 0x0041: if R2 is <= 0, branch to 0x0048 otherwise HLT
instr. 0x0049: if R3 is <= 0, branch to 0x0050 (HLT)
preliminary load some numbers in all registers
R0  0x0000 (=0) -or- 0x0000 (=0)
R1  0x0F00 (>0) -or- 0x0010 (>0)
R2  0xC500 (<0) -or- 0x0000 (=0)
R3  0x1000 (>0) -or- 0x0001 (>0)
R4_l 0x2F00 (>0) -or- 0x00FF (>0)
R4_m 0xD000 (<0) -or- 0x8000 (<0 - check priority of cout)
R5_l 0xFF00 (<0) -or- 0x8001 (<0)
R5_m 0x0000 (=0) -or- 0x0006 (>0)
if everything is executed correctly, the program counter stops at 0x004a.

program9 --> NOP, then:
instr. 0x0001: if R4 is zero, branch to 0x0008 otherwise HLT
instr. 0x0009: if [R1 - R0] is zero, branch to 0x0050 (HLT)
instr. 0x0011: if [R1 - R0] is > 0, branch to 0x0018 otherwise HLT
instr. 0x0019: if R5 is > 0, branch to 0x0050 (HLT)
instr. 0x0021: if [R1 - R0] is >= 0, branch to 0x0028 otherwise HLT
instr. 0x0029: if R5 is >= 0, branch to 0x0050 (HLT)
instr. 0x0031: if R5 is < 0, branch to 0x0038 otherwise HLT
instr. 0x0039: if R4 is < 0, branch to 0x0050 (HLT)
instr. 0x0041: if R5 is <= 0, branch to 0x0048 otherwise HLT
instr. 0x0049: if [R1 - R0] is <= 0, branch to 0x0050 (HLT)
preliminary load some numbers in R4/R5 registers
NOTE: [R1 - R0] are used as a 32-bit register
R4 		0x00000000 (0)
R5 		0xf1001000 (<0)
[R1 - R0]	0x0000f110 (>0)
if everything is executed correctly, the program counter stops at 0x004a.

program10 --> NOP, then:
MOVI8 0xAF to R0_l
MOVI16 0x579B to R1
MOV8 from R1_m to R0_m
MOV16 from R0 to R4_l
MOV16 from R1 to R4_m
MOV32 from R4 to R5
HLT
It should end up like this:
R0 0x57AF
R1 0x579B
R4 0x579B57AF
R5 0x579B57AF